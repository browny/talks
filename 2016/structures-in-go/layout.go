package main

import "fmt"

func main() {
	fmt.Println("vim-go")
}

var layout = `
GOPATH: /Users/brownylin/go:/Users/brownylin/livehouse/wego

./wego

./wego/script
./wego/regression
./wego/src

./wego/src/github.com/...
./wego/src/livehouse.in/<modules>
./wego/src/glide.yml

// not in vcs (generated by glide install)
./wego/src/vendor 
./wego/src/vendor/cloud.google.com/
./wego/src/vendor/code.cloudfoundry.org/
./wego/src/vendor/github.com/
./wego/src/vendor/golang.org/
./wego/src/vendor/google.golang.org/
./wego/src/vendor/gopkg.in/
`

var buildImage = `
FROM golang:1.7.1

# install glide
RUN \
  go get github.com/Masterminds/glide

COPY script/wego-reactor/glide.yaml /go/src/glide.yaml
WORKDIR /go/src

RUN \
  glide install && \
  glide rebuild && \
  rm /go/src/glide.yaml
`

var runImage = `
FROM wego-golang-run:latest

COPY build/pixiu /build/pixiu
USER serviceacc

ENTRYPOINT ["/build/pixiu"]
`

var golangRunImage = `
FROM debian:jessie

RUN \
  echo 'install pkgs' && \
  apt-get update && \
  apt-get install -y ca-certificates curl && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/*
`

var githook = `
echo "[go vet]"
go vet $(go list straas.io/...)

echo "[golint]"
go list straas.io/... | grep -v "mocks" | xargs -n 1 golint

echo "[list test packages to run]"
gt -l -short $(go list straas.io/...)

echo "[go test with gt]"
gt -short $(go list straas.io/...)
`

var naive = `
package controller

type Controller struct {
	transDao *TransDao
	transRequester *TransRequester
}

func (c *Controller) GetAvailableTranscoder() *Transcoder {
	transcoders, _ := transDao.List()
	for _, tr := range transcoders {
		if tr.State != "spare" {
			continue
		}
		if !transRequester.IsHealthy(tr.Host) {
			continue
		}
		return tr
	}
	return nil
}
`

var clean = `
package usecases

type TransDaoOp interface {
	List() ([]*domain.Transcoder, error)
}

type TransRequesterOp interface {
	IsHealthy(host string) bool
}

type Dispatch struct {
	transDao *TransDaoOp 'inject:""'
	transRequester *TransRequesterOp 'inject:""'
}

func (c *Dispatch) GetAvailableTranscoder() *domain.Transcoder {
	// the same
}
`

var test = `
func (s *DispatchTestSuite) Test_GetAvailableTranscoder() {
	transDaoMock := mocks.TransDaoOp{}
	transRequesterMock := mocks.TransRequesterOp{}

	tested := Dispatch{
		transDao: transDaoMock
		transRequester: transRequesterMock
	}

	testList := []*domain.Transcoder{
		&domain.Transcoder{Host: "1.1.1.1", State: "busy"},
		&domain.Transcoder{Host: "2.2.2.2", State: "spare"},
		&domain.Transcoder{Host: "3.3.3.3", State: "space"},
	}

	transDaoMock.On("List").Return(testList, nil).Once()
	transRequesterMock.On("IsHealthy", mock.Anything).Return(
		func(host string) bool {
			if host == "2.2.2.2" { return false }
			return true
		}
	).Times(2)

	result := tested.GetAvailableTranscoder()
	s.NotNil(result)
	s.Equal("3.3.3.3", result.Host)

	transRequesterMock.AssertNumberOfCalls(s.T(), "IsHealthy", 2)
}
`
